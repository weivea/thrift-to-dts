//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./keycenter_types');
//HELPER FUNCTIONS AND STRUCTURES

var KeycenterAgent_batchEncrypt_args = function(args) {
  this.sid = null;
  this.raw = null;
  this.userOnlySecret = null;
  this.compressType = null;
  if (args) {
    if (args.sid !== undefined && args.sid !== null) {
      this.sid = args.sid;
    }
    if (args.raw !== undefined && args.raw !== null) {
      this.raw = Thrift.copyList(args.raw, [null]);
    }
    if (args.userOnlySecret !== undefined && args.userOnlySecret !== null) {
      this.userOnlySecret = args.userOnlySecret;
    }
    if (args.compressType !== undefined && args.compressType !== null) {
      this.compressType = args.compressType;
    }
  }
};
KeycenterAgent_batchEncrypt_args.prototype = {};
KeycenterAgent_batchEncrypt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.raw = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readBinary();
          this.raw.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userOnlySecret = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compressType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_batchEncrypt_args.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_batchEncrypt_args');
  if (this.sid !== null && this.sid !== undefined) {
    output.writeFieldBegin('sid', Thrift.Type.STRING, 1);
    output.writeString(this.sid);
    output.writeFieldEnd();
  }
  if (this.raw !== null && this.raw !== undefined) {
    output.writeFieldBegin('raw', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.raw.length);
    for (var iter4 in this.raw) {
      if (this.raw.hasOwnProperty(iter4)) {
        iter4 = this.raw[iter4];
        output.writeBinary(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userOnlySecret !== null && this.userOnlySecret !== undefined) {
    output.writeFieldBegin('userOnlySecret', Thrift.Type.STRING, 3);
    output.writeBinary(this.userOnlySecret);
    output.writeFieldEnd();
  }
  if (this.compressType !== null && this.compressType !== undefined) {
    output.writeFieldBegin('compressType', Thrift.Type.I32, 4);
    output.writeI32(this.compressType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_batchEncrypt_result = function(args) {
  this.success = null;
  this.ke = null;
  if (args instanceof ttypes.KeycenterException) {
    this.ke = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ke !== undefined && args.ke !== null) {
      this.ke = args.ke;
    }
  }
};
KeycenterAgent_batchEncrypt_result.prototype = {};
KeycenterAgent_batchEncrypt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readBinary();
          this.success.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ke = new ttypes.KeycenterException();
        this.ke.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_batchEncrypt_result.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_batchEncrypt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        output.writeBinary(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ke !== null && this.ke !== undefined) {
    output.writeFieldBegin('ke', Thrift.Type.STRUCT, 1);
    this.ke.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_batchDecrypt_args = function(args) {
  this.sid = null;
  this.cipher = null;
  this.userOnlySecret = null;
  this.compressType = null;
  if (args) {
    if (args.sid !== undefined && args.sid !== null) {
      this.sid = args.sid;
    }
    if (args.cipher !== undefined && args.cipher !== null) {
      this.cipher = Thrift.copyList(args.cipher, [null]);
    }
    if (args.userOnlySecret !== undefined && args.userOnlySecret !== null) {
      this.userOnlySecret = args.userOnlySecret;
    }
    if (args.compressType !== undefined && args.compressType !== null) {
      this.compressType = args.compressType;
    }
  }
};
KeycenterAgent_batchDecrypt_args.prototype = {};
KeycenterAgent_batchDecrypt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cipher = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = input.readBinary();
          this.cipher.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userOnlySecret = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compressType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_batchDecrypt_args.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_batchDecrypt_args');
  if (this.sid !== null && this.sid !== undefined) {
    output.writeFieldBegin('sid', Thrift.Type.STRING, 1);
    output.writeString(this.sid);
    output.writeFieldEnd();
  }
  if (this.cipher !== null && this.cipher !== undefined) {
    output.writeFieldBegin('cipher', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.cipher.length);
    for (var iter14 in this.cipher) {
      if (this.cipher.hasOwnProperty(iter14)) {
        iter14 = this.cipher[iter14];
        output.writeBinary(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userOnlySecret !== null && this.userOnlySecret !== undefined) {
    output.writeFieldBegin('userOnlySecret', Thrift.Type.STRING, 3);
    output.writeBinary(this.userOnlySecret);
    output.writeFieldEnd();
  }
  if (this.compressType !== null && this.compressType !== undefined) {
    output.writeFieldBegin('compressType', Thrift.Type.I32, 4);
    output.writeI32(this.compressType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_batchDecrypt_result = function(args) {
  this.success = null;
  this.ke = null;
  if (args instanceof ttypes.KeycenterException) {
    this.ke = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ke !== undefined && args.ke !== null) {
      this.ke = args.ke;
    }
  }
};
KeycenterAgent_batchDecrypt_result.prototype = {};
KeycenterAgent_batchDecrypt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = input.readBinary();
          this.success.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ke = new ttypes.KeycenterException();
        this.ke.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_batchDecrypt_result.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_batchDecrypt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter19 in this.success) {
      if (this.success.hasOwnProperty(iter19)) {
        iter19 = this.success[iter19];
        output.writeBinary(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ke !== null && this.ke !== undefined) {
    output.writeFieldBegin('ke', Thrift.Type.STRUCT, 1);
    this.ke.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_encrypt_args = function(args) {
  this.sid = null;
  this.raw = null;
  this.userOnlySecret = null;
  this.compressType = null;
  if (args) {
    if (args.sid !== undefined && args.sid !== null) {
      this.sid = args.sid;
    }
    if (args.raw !== undefined && args.raw !== null) {
      this.raw = args.raw;
    }
    if (args.userOnlySecret !== undefined && args.userOnlySecret !== null) {
      this.userOnlySecret = args.userOnlySecret;
    }
    if (args.compressType !== undefined && args.compressType !== null) {
      this.compressType = args.compressType;
    }
  }
};
KeycenterAgent_encrypt_args.prototype = {};
KeycenterAgent_encrypt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.raw = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userOnlySecret = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compressType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_encrypt_args.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_encrypt_args');
  if (this.sid !== null && this.sid !== undefined) {
    output.writeFieldBegin('sid', Thrift.Type.STRING, 1);
    output.writeString(this.sid);
    output.writeFieldEnd();
  }
  if (this.raw !== null && this.raw !== undefined) {
    output.writeFieldBegin('raw', Thrift.Type.STRING, 2);
    output.writeBinary(this.raw);
    output.writeFieldEnd();
  }
  if (this.userOnlySecret !== null && this.userOnlySecret !== undefined) {
    output.writeFieldBegin('userOnlySecret', Thrift.Type.STRING, 3);
    output.writeBinary(this.userOnlySecret);
    output.writeFieldEnd();
  }
  if (this.compressType !== null && this.compressType !== undefined) {
    output.writeFieldBegin('compressType', Thrift.Type.I32, 4);
    output.writeI32(this.compressType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_encrypt_result = function(args) {
  this.success = null;
  this.ke = null;
  if (args instanceof ttypes.KeycenterException) {
    this.ke = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ke !== undefined && args.ke !== null) {
      this.ke = args.ke;
    }
  }
};
KeycenterAgent_encrypt_result.prototype = {};
KeycenterAgent_encrypt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ke = new ttypes.KeycenterException();
        this.ke.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_encrypt_result.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_encrypt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ke !== null && this.ke !== undefined) {
    output.writeFieldBegin('ke', Thrift.Type.STRUCT, 1);
    this.ke.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_decrypt_args = function(args) {
  this.sid = null;
  this.cipher = null;
  this.userOnlySecret = null;
  this.compressType = null;
  if (args) {
    if (args.sid !== undefined && args.sid !== null) {
      this.sid = args.sid;
    }
    if (args.cipher !== undefined && args.cipher !== null) {
      this.cipher = args.cipher;
    }
    if (args.userOnlySecret !== undefined && args.userOnlySecret !== null) {
      this.userOnlySecret = args.userOnlySecret;
    }
    if (args.compressType !== undefined && args.compressType !== null) {
      this.compressType = args.compressType;
    }
  }
};
KeycenterAgent_decrypt_args.prototype = {};
KeycenterAgent_decrypt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cipher = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userOnlySecret = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.compressType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_decrypt_args.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_decrypt_args');
  if (this.sid !== null && this.sid !== undefined) {
    output.writeFieldBegin('sid', Thrift.Type.STRING, 1);
    output.writeString(this.sid);
    output.writeFieldEnd();
  }
  if (this.cipher !== null && this.cipher !== undefined) {
    output.writeFieldBegin('cipher', Thrift.Type.STRING, 2);
    output.writeBinary(this.cipher);
    output.writeFieldEnd();
  }
  if (this.userOnlySecret !== null && this.userOnlySecret !== undefined) {
    output.writeFieldBegin('userOnlySecret', Thrift.Type.STRING, 3);
    output.writeBinary(this.userOnlySecret);
    output.writeFieldEnd();
  }
  if (this.compressType !== null && this.compressType !== undefined) {
    output.writeFieldBegin('compressType', Thrift.Type.I32, 4);
    output.writeI32(this.compressType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_decrypt_result = function(args) {
  this.success = null;
  this.ke = null;
  if (args instanceof ttypes.KeycenterException) {
    this.ke = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ke !== undefined && args.ke !== null) {
      this.ke = args.ke;
    }
  }
};
KeycenterAgent_decrypt_result.prototype = {};
KeycenterAgent_decrypt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ke = new ttypes.KeycenterException();
        this.ke.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_decrypt_result.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_decrypt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ke !== null && this.ke !== undefined) {
    output.writeFieldBegin('ke', Thrift.Type.STRUCT, 1);
    this.ke.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_makeSignature_args = function(args) {
  this.sid = null;
  this.data = null;
  if (args) {
    if (args.sid !== undefined && args.sid !== null) {
      this.sid = args.sid;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
KeycenterAgent_makeSignature_args.prototype = {};
KeycenterAgent_makeSignature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_makeSignature_args.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_makeSignature_args');
  if (this.sid !== null && this.sid !== undefined) {
    output.writeFieldBegin('sid', Thrift.Type.STRING, 1);
    output.writeString(this.sid);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_makeSignature_result = function(args) {
  this.success = null;
  this.ke = null;
  if (args instanceof ttypes.KeycenterException) {
    this.ke = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ke !== undefined && args.ke !== null) {
      this.ke = args.ke;
    }
  }
};
KeycenterAgent_makeSignature_result.prototype = {};
KeycenterAgent_makeSignature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ke = new ttypes.KeycenterException();
        this.ke.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_makeSignature_result.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_makeSignature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ke !== null && this.ke !== undefined) {
    output.writeFieldBegin('ke', Thrift.Type.STRUCT, 1);
    this.ke.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_validateSignature_args = function(args) {
  this.sid = null;
  this.data = null;
  this.sign = null;
  if (args) {
    if (args.sid !== undefined && args.sid !== null) {
      this.sid = args.sid;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
    if (args.sign !== undefined && args.sign !== null) {
      this.sign = args.sign;
    }
  }
};
KeycenterAgent_validateSignature_args.prototype = {};
KeycenterAgent_validateSignature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sign = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_validateSignature_args.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_validateSignature_args');
  if (this.sid !== null && this.sid !== undefined) {
    output.writeFieldBegin('sid', Thrift.Type.STRING, 1);
    output.writeString(this.sid);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.STRING, 3);
    output.writeBinary(this.sign);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgent_validateSignature_result = function(args) {
  this.success = null;
  this.ke = null;
  if (args instanceof ttypes.KeycenterException) {
    this.ke = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ke !== undefined && args.ke !== null) {
      this.ke = args.ke;
    }
  }
};
KeycenterAgent_validateSignature_result.prototype = {};
KeycenterAgent_validateSignature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ke = new ttypes.KeycenterException();
        this.ke.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterAgent_validateSignature_result.prototype.write = function(output) {
  output.writeStructBegin('KeycenterAgent_validateSignature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ke !== null && this.ke !== undefined) {
    output.writeFieldBegin('ke', Thrift.Type.STRUCT, 1);
    this.ke.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeycenterAgentClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
KeycenterAgentClient.prototype = {};
KeycenterAgentClient.prototype.seqid = function() { return this._seqid; };
KeycenterAgentClient.prototype.new_seqid = function() { return this._seqid += 1; };

KeycenterAgentClient.prototype.batchEncrypt = function(sid, raw, userOnlySecret, compressType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_batchEncrypt(sid, raw, userOnlySecret, compressType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_batchEncrypt(sid, raw, userOnlySecret, compressType);
  }
};

KeycenterAgentClient.prototype.send_batchEncrypt = function(sid, raw, userOnlySecret, compressType) {
  var output = new this.pClass(this.output);
  var params = {
    sid: sid,
    raw: raw,
    userOnlySecret: userOnlySecret,
    compressType: compressType
  };
  var args = new KeycenterAgent_batchEncrypt_args(params);
  try {
    output.writeMessageBegin('batchEncrypt', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

KeycenterAgentClient.prototype.recv_batchEncrypt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new KeycenterAgent_batchEncrypt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ke) {
    return callback(result.ke);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('batchEncrypt failed: unknown result');
};

KeycenterAgentClient.prototype.batchDecrypt = function(sid, cipher, userOnlySecret, compressType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_batchDecrypt(sid, cipher, userOnlySecret, compressType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_batchDecrypt(sid, cipher, userOnlySecret, compressType);
  }
};

KeycenterAgentClient.prototype.send_batchDecrypt = function(sid, cipher, userOnlySecret, compressType) {
  var output = new this.pClass(this.output);
  var params = {
    sid: sid,
    cipher: cipher,
    userOnlySecret: userOnlySecret,
    compressType: compressType
  };
  var args = new KeycenterAgent_batchDecrypt_args(params);
  try {
    output.writeMessageBegin('batchDecrypt', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

KeycenterAgentClient.prototype.recv_batchDecrypt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new KeycenterAgent_batchDecrypt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ke) {
    return callback(result.ke);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('batchDecrypt failed: unknown result');
};

KeycenterAgentClient.prototype.encrypt = function(sid, raw, userOnlySecret, compressType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_encrypt(sid, raw, userOnlySecret, compressType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_encrypt(sid, raw, userOnlySecret, compressType);
  }
};

KeycenterAgentClient.prototype.send_encrypt = function(sid, raw, userOnlySecret, compressType) {
  var output = new this.pClass(this.output);
  var params = {
    sid: sid,
    raw: raw,
    userOnlySecret: userOnlySecret,
    compressType: compressType
  };
  var args = new KeycenterAgent_encrypt_args(params);
  try {
    output.writeMessageBegin('encrypt', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

KeycenterAgentClient.prototype.recv_encrypt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new KeycenterAgent_encrypt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ke) {
    return callback(result.ke);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('encrypt failed: unknown result');
};

KeycenterAgentClient.prototype.decrypt = function(sid, cipher, userOnlySecret, compressType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_decrypt(sid, cipher, userOnlySecret, compressType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_decrypt(sid, cipher, userOnlySecret, compressType);
  }
};

KeycenterAgentClient.prototype.send_decrypt = function(sid, cipher, userOnlySecret, compressType) {
  var output = new this.pClass(this.output);
  var params = {
    sid: sid,
    cipher: cipher,
    userOnlySecret: userOnlySecret,
    compressType: compressType
  };
  var args = new KeycenterAgent_decrypt_args(params);
  try {
    output.writeMessageBegin('decrypt', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

KeycenterAgentClient.prototype.recv_decrypt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new KeycenterAgent_decrypt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ke) {
    return callback(result.ke);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('decrypt failed: unknown result');
};

KeycenterAgentClient.prototype.makeSignature = function(sid, data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_makeSignature(sid, data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_makeSignature(sid, data);
  }
};

KeycenterAgentClient.prototype.send_makeSignature = function(sid, data) {
  var output = new this.pClass(this.output);
  var params = {
    sid: sid,
    data: data
  };
  var args = new KeycenterAgent_makeSignature_args(params);
  try {
    output.writeMessageBegin('makeSignature', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

KeycenterAgentClient.prototype.recv_makeSignature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new KeycenterAgent_makeSignature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ke) {
    return callback(result.ke);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('makeSignature failed: unknown result');
};

KeycenterAgentClient.prototype.validateSignature = function(sid, data, sign, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_validateSignature(sid, data, sign);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_validateSignature(sid, data, sign);
  }
};

KeycenterAgentClient.prototype.send_validateSignature = function(sid, data, sign) {
  var output = new this.pClass(this.output);
  var params = {
    sid: sid,
    data: data,
    sign: sign
  };
  var args = new KeycenterAgent_validateSignature_args(params);
  try {
    output.writeMessageBegin('validateSignature', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

KeycenterAgentClient.prototype.recv_validateSignature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new KeycenterAgent_validateSignature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ke) {
    return callback(result.ke);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('validateSignature failed: unknown result');
};
var KeycenterAgentProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
KeycenterAgentProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
KeycenterAgentProcessor.prototype.process_batchEncrypt = function(seqid, input, output) {
  var args = new KeycenterAgent_batchEncrypt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.batchEncrypt.length === 4) {
    Q.fcall(this._handler.batchEncrypt.bind(this._handler),
      args.sid,
      args.raw,
      args.userOnlySecret,
      args.compressType
    ).then(function(result) {
      var result_obj = new KeycenterAgent_batchEncrypt_result({success: result});
      output.writeMessageBegin("batchEncrypt", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.KeycenterException) {
        result = new KeycenterAgent_batchEncrypt_result(err);
        output.writeMessageBegin("batchEncrypt", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("batchEncrypt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.batchEncrypt(args.sid, args.raw, args.userOnlySecret, args.compressType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.KeycenterException) {
        result_obj = new KeycenterAgent_batchEncrypt_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("batchEncrypt", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("batchEncrypt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
KeycenterAgentProcessor.prototype.process_batchDecrypt = function(seqid, input, output) {
  var args = new KeycenterAgent_batchDecrypt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.batchDecrypt.length === 4) {
    Q.fcall(this._handler.batchDecrypt.bind(this._handler),
      args.sid,
      args.cipher,
      args.userOnlySecret,
      args.compressType
    ).then(function(result) {
      var result_obj = new KeycenterAgent_batchDecrypt_result({success: result});
      output.writeMessageBegin("batchDecrypt", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.KeycenterException) {
        result = new KeycenterAgent_batchDecrypt_result(err);
        output.writeMessageBegin("batchDecrypt", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("batchDecrypt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.batchDecrypt(args.sid, args.cipher, args.userOnlySecret, args.compressType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.KeycenterException) {
        result_obj = new KeycenterAgent_batchDecrypt_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("batchDecrypt", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("batchDecrypt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
KeycenterAgentProcessor.prototype.process_encrypt = function(seqid, input, output) {
  var args = new KeycenterAgent_encrypt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.encrypt.length === 4) {
    Q.fcall(this._handler.encrypt.bind(this._handler),
      args.sid,
      args.raw,
      args.userOnlySecret,
      args.compressType
    ).then(function(result) {
      var result_obj = new KeycenterAgent_encrypt_result({success: result});
      output.writeMessageBegin("encrypt", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.KeycenterException) {
        result = new KeycenterAgent_encrypt_result(err);
        output.writeMessageBegin("encrypt", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("encrypt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.encrypt(args.sid, args.raw, args.userOnlySecret, args.compressType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.KeycenterException) {
        result_obj = new KeycenterAgent_encrypt_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("encrypt", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("encrypt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
KeycenterAgentProcessor.prototype.process_decrypt = function(seqid, input, output) {
  var args = new KeycenterAgent_decrypt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.decrypt.length === 4) {
    Q.fcall(this._handler.decrypt.bind(this._handler),
      args.sid,
      args.cipher,
      args.userOnlySecret,
      args.compressType
    ).then(function(result) {
      var result_obj = new KeycenterAgent_decrypt_result({success: result});
      output.writeMessageBegin("decrypt", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.KeycenterException) {
        result = new KeycenterAgent_decrypt_result(err);
        output.writeMessageBegin("decrypt", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("decrypt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.decrypt(args.sid, args.cipher, args.userOnlySecret, args.compressType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.KeycenterException) {
        result_obj = new KeycenterAgent_decrypt_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("decrypt", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("decrypt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
KeycenterAgentProcessor.prototype.process_makeSignature = function(seqid, input, output) {
  var args = new KeycenterAgent_makeSignature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.makeSignature.length === 2) {
    Q.fcall(this._handler.makeSignature.bind(this._handler),
      args.sid,
      args.data
    ).then(function(result) {
      var result_obj = new KeycenterAgent_makeSignature_result({success: result});
      output.writeMessageBegin("makeSignature", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.KeycenterException) {
        result = new KeycenterAgent_makeSignature_result(err);
        output.writeMessageBegin("makeSignature", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("makeSignature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.makeSignature(args.sid, args.data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.KeycenterException) {
        result_obj = new KeycenterAgent_makeSignature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("makeSignature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("makeSignature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
KeycenterAgentProcessor.prototype.process_validateSignature = function(seqid, input, output) {
  var args = new KeycenterAgent_validateSignature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.validateSignature.length === 3) {
    Q.fcall(this._handler.validateSignature.bind(this._handler),
      args.sid,
      args.data,
      args.sign
    ).then(function(result) {
      var result_obj = new KeycenterAgent_validateSignature_result({success: result});
      output.writeMessageBegin("validateSignature", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.KeycenterException) {
        result = new KeycenterAgent_validateSignature_result(err);
        output.writeMessageBegin("validateSignature", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("validateSignature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.validateSignature(args.sid, args.data, args.sign, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.KeycenterException) {
        result_obj = new KeycenterAgent_validateSignature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("validateSignature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("validateSignature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
