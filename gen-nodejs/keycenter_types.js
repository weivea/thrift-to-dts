//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.ErrorType = {
  'CLIENT_ERROR' : 0,
  'SERVER_ERROR' : 1
};
ttypes.CompressionType = {
  'NONE' : 0,
  'SNAPPY' : 1
};
var KeycenterException = module.exports.KeycenterException = function(args) {
  Thrift.TException.call(this, "KeycenterException");
  this.name = "KeycenterException";
  this.message = null;
  this.causeStacktrace = null;
  this.errorType = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.causeStacktrace !== undefined && args.causeStacktrace !== null) {
      this.causeStacktrace = args.causeStacktrace;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field causeStacktrace is unset!');
    }
    if (args.errorType !== undefined && args.errorType !== null) {
      this.errorType = args.errorType;
    }
  }
};
Thrift.inherits(KeycenterException, Thrift.TException);
KeycenterException.prototype.name = 'KeycenterException';
KeycenterException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.causeStacktrace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.errorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeycenterException.prototype.write = function(output) {
  output.writeStructBegin('KeycenterException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.causeStacktrace !== null && this.causeStacktrace !== undefined) {
    output.writeFieldBegin('causeStacktrace', Thrift.Type.STRING, 2);
    output.writeString(this.causeStacktrace);
    output.writeFieldEnd();
  }
  if (this.errorType !== null && this.errorType !== undefined) {
    output.writeFieldBegin('errorType', Thrift.Type.I32, 3);
    output.writeI32(this.errorType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

